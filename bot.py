from telebot import TeleBot
from telebot.handler_backends import State, StatesGroup
from telebot.storage import StateMemoryStorage
from models import (Session, create_tables, engine, CustomWords, Users, exclude_common_word,
CommonWords, get_user_words, fill_common_words, add_custom_word, check_user, add_user,
checking_words_duplicate, delete_custom_word)
from keyboards import Comand, create_main_keyboard
from config import TOKEN
import time
import re

bot = TeleBot(TOKEN)

class MyStates(StatesGroup):
    '''–ù–∞–±–æ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–º.'''
    target_word = State()
    add_russian_word = State()
    add_english_word = State()
    delete_word= State()

class Comand:
    ADD_WORD = '–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï'
    DELETE_WORD = '–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ ‚õî'
    NEXT = '–î–∞–ª–µ–µ ‚è©'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
with Session() as session:
    create_tables(engine)
    fill_common_words(session)
    
@bot.message_handler(commands=['start'])
def start_bot(message):
    '''–ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –Ω–µ—Ç —Ç–æ –¥–æ–±–∞–≤–∏—Ç'''
    with Session() as session:
        user = check_user(session, message)
        if not user:  # –ø—Ä–≤–µ—Ä—è–µ—Ç –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –µ—Å–ª–∏ –Ω–µ—Ç —Ç–æ –¥–æ–±–∞–≤–ª—è–µ—Ç 
            add_user(session, message)
            bot.send_message(message.chat.id, '‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!')
    bot.send_message(message.chat.id, f'''–ü—Ä–∏–≤–µ—Ç üëã –î–∞–≤–∞–π –ø–æ–ø—Ä–∞–∫—Ç–∏–∫—É–µ–º—Å—è –≤ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ. 
–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –º–æ–∂–µ—à—å –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –≤ —É–¥–æ–±–Ω–æ–º –¥–ª—è —Å–µ–±—è —Ç–µ–º–ø–µ.
–£ —Ç–µ–±—è –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç—Ä–µ–Ω–∞–∂—ë—Ä, –∫–∞–∫ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä, –∏ —Å–æ–±–∏—Ä–∞—Ç—å —Å–≤–æ—é —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é 
–±–∞–∑—É –¥–ª—è –æ–±—É—á–µ–Ω–∏—è. –î–ª—è —ç—Ç–æ–≥–æ –≤–æ—Å–ø—Ä–æ–ª—å–∑—É–π—Å—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏:
–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï\n–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ üîô\n–ù—É —á—Ç–æ, –Ω–∞—á–Ω—ë–º ‚¨áÔ∏è''')
    generate_new_word(message)

@bot.message_handler(commands=['all_words']) 
def all_words(message):
    """–í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–∞–∑–æ–≤—ã–µ + –∫–∞—Å—Ç–æ–º–Ω—ã–µ), –∏—Å–∫–ª—é—á–∞—è —É–¥–∞–ª–µ–Ω–Ω—ã–µ"""
    with Session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–ª–æ–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        words = get_user_words(session, message.from_user.id)
        if not words:
            bot.send_message(message.chat.id, "üì≠ –í–∞—à —Å–ª–æ–≤–∞—Ä—å –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ —Å–ª–æ–≤–∞!")
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—ã–≤–æ–¥
        words_text = "üìñ –í–∞—à —Å–ª–æ–≤–∞—Ä—å:\n" + "\n".join(
            f"{i}. {ru_word} - {en_word}" 
            for i, (ru_word, en_word) in enumerate(words, 1)
        )
        bot.send_message(message.chat.id, words_text)

@bot.message_handler(commands=['cancel']) 
def cancel_action(message):
    '''–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã cancel'''
    bot.delete_state(message.from_user.id, message.chat.id)
    bot.send_message(message.chat.id, '‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ')
    generate_new_word(message)

def generate_new_word(message):
    '''–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª–æ–≤–æ –∫–æ—Ç–æ—Ä–æ–µ –Ω–∞–¥–æ —É–≥–∞–¥–∞—Ç—å'''
    with Session() as session:
        words = get_user_words(session, message.from_user.id)
        if not words:
            bot.send_message(message.chat.id, '–°–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ —Å–ª–æ–≤–∞!')
            return
    markup, ru_word, en_word = create_main_keyboard(words) # –≤–æ–∑–≤—Ä—è—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, —Ä—É—Å—Å–∫–æ–µ —Å–ª–æ–≤–æ –∏ –µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥
    bot.send_message(message.chat.id, f'–£–≥–∞–¥–∞–π —Å–ª–æ–≤–æ {ru_word}', reply_markup=markup)
    bot.set_state(message.from_user.id, MyStates.target_word, message.chat.id)
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data['target_word'] = en_word

@bot.message_handler(func=lambda m: m.text == Comand.NEXT)
def handle_next(message):
    '''–ö–æ–º–∞–Ω–¥–∞ '–¥–∞–ª–µ–µ' '''
    generate_new_word(message)

@bot.message_handler(func=lambda m: m.text == Comand.ADD_WORD)
def add_word(message):
    '''–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ'''
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ:')
    bot.set_state(message.from_user.id, MyStates.add_russian_word, message.chat.id)
                
def check_and_handle_duplicates(session, ru_word, message):
    '''–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç—ã —Å–ª–æ–≤'''
    user = check_user(session, message)
    custom_word, common_word, excluded_word = checking_words_duplicate(session, ru_word, user)
    # –ï—Å–ª–∏ —Å–ª–æ–≤–æ —É–∂–µ –≤ CustomWords
    if custom_word:
        bot.send_message(message.chat.id, f'‚ùå –°–ª–æ–≤–æ "{ru_word}" —É–∂–µ –µ—Å—Ç—å –≤ –≤–∞—à–µ–º —Å–ª–æ–≤–∞—Ä–µ!')
        bot.delete_state(message.from_user.id, message.chat.id)
        return True
    # –ï—Å–ª–∏ —Å–ª–æ–≤–æ –≤ CommonWords –∏ –Ω–µ –∏—Å–∫–ª—é—á–µ–Ω–æ
    elif common_word and not excluded_word:
        bot.send_message(message.chat.id, f'‚ÑπÔ∏è –°–ª–æ–≤–æ "{ru_word}" —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–æ–≤–æ–º –Ω–∞–±–æ—Ä–µ. ')
        bot.delete_state(message.from_user.id, message.chat.id)
        return True
    # –ï—Å–ª–∏ —Å–ª–æ–≤–æ –±—ã–ª–æ –∏—Å–∫–ª—é—á–µ–Ω–æ - —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º
    elif excluded_word:
        session.delete(excluded_word)
        session.commit()
        bot.send_message(message.chat.id, f'üîì –°–ª–æ–≤–æ "{ru_word}" –±—ã–ª–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ –±–∞–∑–æ–≤–æ–≥–æ –Ω–∞–±–æ—Ä–∞!')
        bot.delete_state(message.from_user.id, message.chat.id)
        return True
    else:
        return False
    
@bot.message_handler(func=lambda message: bot.get_state(message.from_user.id, message.chat.id)=='MyStates:add_russian_word')
def add_russian_word(message):
    '''–î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–≤–æ–¥'''
    ru_word = message.text.strip().capitalize()   # –æ–±—Ä–µ–∑–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –¥–µ–ª–∞–µ–º —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã
    if not is_russian(ru_word):
        bot.send_message(message.chat.id, '‚ùå –û—à–∏–±–∫–∞: –≤—ã –≤–≤–µ–ª–∏–µ —Å–ª–æ–≤–æ –Ω–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ!')
        bot.delete_state(message.from_user.id, message.chat.id)
        return 

    with Session() as session:
        if check_and_handle_duplicates(session, ru_word, message):  # –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
            bot.delete_state(message.from_user.id, message.chat.id)
            return
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data['russian_word'] = ru_word
    bot.send_message(message.chat.id, '–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º:')
    bot.set_state(message.from_user.id, MyStates.add_english_word, message.chat.id)
            
@bot.message_handler(func=lambda message: bot.get_state(message.from_user.id, message.chat.id)=='MyStates:add_english_word')
def add_english_word(message):
    '''–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —Å–ª–æ–≤–∞.'''
    if is_english(message.text):
        with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
            ru_word = data.get('russian_word')  
            en_word = message.text.strip().capitalize()
            with Session() as session:
                if add_custom_word(session, message.from_user.id, ru_word, en_word):
                    bot.send_message(message.chat.id, f'–°–ª–æ–≤–æ "{ru_word}" –¥–æ–±–∞–≤–ª–µ–Ω–æ!')
                else:
                    bot.send_message(message.chat.id, '–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞')
        bot.delete_state(message.from_user.id, message.chat.id)
    else:
        bot.send_message(message.chat.id, '‚ùå –û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ!')
        add_russian_word(message)
        
@bot.message_handler(func=lambda m: m.text == Comand.DELETE_WORD)
def handle_delete_word(message):
    '''–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞.'''
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:')
    bot.set_state(message.from_user.id, MyStates.delete_word, message.chat.id)

@bot.message_handler(func=lambda message: bot.get_state(message.from_user.id, message.chat.id)=='MyStates:delete_word')
def delete_word(message):
    '''–£–¥–∞–ª—è–µ—Ç –∏–ª–∏ –∏—Å–∫–ª—é—á–∞–µ—Ç —Å–ª–æ–≤–æ.'''
    if not is_russian(message.text):
        bot.send_message(message.chat.id, '‚ùå –û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ!')
        return handle_delete_word(message)
    ru_word = message.text.strip().capitalize()
       
    with Session() as session:
        user = check_user(session, message)
        custom_word, common_word, excluded_word = checking_words_duplicate(session, ru_word, user)
        # 1. –ï—Å–ª–∏ —Å–ª–æ–≤–æ –≤ CustomWords - —É–¥–∞–ª—è–µ–º
        if custom_word: 
            if delete_custom_word(session, ru_word, user):
                bot.send_message(message.chat.id, f'‚úÖ –°–ª–æ–≤–æ "{ru_word}" —É–¥–∞–ª–µ–Ω–æ!')
            else:
                bot.send_message(message.chat.id, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ')
            bot.delete_state(message.from_user.id, message.chat.id)
        # 2. –ï—Å–ª–∏ –µ—Å—Ç—å —Å–ª–æ–≤–æ –≤ CommonWords —Ç–æ–≥–¥–∞ –∏—Å–∫–ª—é—á–∞–µ–º 
        elif common_word:
            if excluded_word:
                bot.send_message(message.chat.id, f'‚ÑπÔ∏è –°–ª–æ–≤–æ "{ru_word}" —É–∂–µ –∏—Å–∫–ª—é—á–µ–Ω–æ —Ä–∞–Ω–µ–µ.')
                bot.delete_state(message.from_user.id, message.chat.id)
            else:
                exclude_common_word(session, user, common_word)
                bot.send_message(message.chat.id, f'‚úÖ –°–ª–æ–≤–æ "{ru_word}" –∏—Å–∫–ª—é—á–µ–Ω–æ –∏–∑ –±–∞–∑–æ–≤–æ–≥–æ –Ω–∞–±–æ—Ä–∞!')
   # 3. –ï—Å–ª–∏ —Å–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
        else:
            bot.send_message(message.chat.id, f'‚ùå –°–ª–æ–≤–æ "{ru_word}" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –≤–∞—à–µ–º —Å–ª–æ–≤–∞—Ä–µ –∏–ª–∏ –±–∞–∑–æ–≤–æ–º –Ω–∞–±–æ—Ä–µ.')
            return handle_delete_word(message)
            
@bot.message_handler(func=lambda message: bot.get_state(message.from_user.id, message.chat.id)=='MyStates:target_word')
def message_reply(message):
    '''–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≥–∞–¥—ã–≤–∞–Ω–∏—è —Å–ª–æ–≤–∞'''
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        if message.text.strip().capitalize() == data['target_word']:
            bot.send_message(message.chat.id, '‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!')
        else:
            bot.send_message(message.chat.id, '‚ùå –ù–µ–≤–µ—Ä–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
    
@bot.message_handler(func=lambda message: True)
def text_processing(message):
    '''–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞'''
    bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ª—é–±—É—é –∫–æ–º–∞–Ω–¥—É!')
    
def is_russian(text):
    '''–ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—å—Å—è –ª–∏ —Å–ª–æ–≤–æ —Ä—É—Å—Å–∫–∏–º'''
    return bool(re.fullmatch(r'[–∞-—è–ê-–Ø—ë–Å\s]+', text))  

def is_english(text):
    '''–ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—å—Å—è –ª–∏ —Å–ª–æ–≤–æ –∞–Ω–≥–ª–∏–π—Å–∫–∏–º'''
    return bool(re.fullmatch(r'[a-zA-Z\s]+', text))  

if __name__ == '__main__':
    '''–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞'''
    for i in range(3, 0, -1):
        print(f'{i}...')
        time.sleep(0.5)
    bot.polling()
    